<!DOCTYPE html>
<html>
<head>
  <title><%= title %></title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
  <link rel='stylesheet' href='stylesheets/style.css' />
</head>
<body>
  <div class="table" id="table">
    <div class="row">
        <div class="item">
            <div class="videoInfo tiny"></div>
            <video id="vp00" class="video-paused"></video>
            <div class="shortcut">1</div>
        </div>
        <div class="item">
            <div class="videoInfo tiny"></div>
            <video id="vp01" class="video-paused"></video>
            <div class="shortcut">2</div>    
        </div>
        <div class="item">
            <div class="videoInfo tiny"></div>
            <video id="vp02" class="video-paused"></video>
            <div class="shortcut">3</div>    
        </div>
        <div class="item">
            <div class="videoInfo tiny"></div>
            <video id="vp03" class="video-paused"></video>
            <div class="shortcut">4</div>    
        </div>
    </div>
    <div class="row">
        <div class="item">
            <div class="videoInfo tiny"></div>
            <video id="vp10" class="video-paused"></video>
            <div class="shortcut">5</div>    
        </div>
        <div class="item">
            <div class="videoInfo tiny"></div>
            <video id="vp11" class="video-paused"></video>
            <div class="shortcut">6</div>
        </div>
        <div class="item">
            <div class="videoInfo tiny"></div>
            <video id="vp12" class="video-paused"></video>
            <div class="shortcut">7</div>
        </div>
        <div class="item">
            <div class="videoInfo tiny"></div>
            <video id="vp13" class="video-paused"></video>
            <div class="shortcut">8</div>
        </div>
    </div>
    <div class="row">
        <div class="item">
            <div class="videoInfo tiny"></div>
            <video id="vp20" class="video-paused"></video>
            <div class="shortcut">9</div>
        </div>
        <div class="item">
            <div class="videoInfo tiny"></div>
            <video id="vp21" class="video-paused"></video>
            <div class="shortcut">10</div>
        </div>
        <div class="item">
            <div class="videoInfo tiny"></div>
            <video id="vp22" class="video-paused"></video>
            <div class="shortcut">11</div>
        </div>
        <div class="item">
            <div class="videoInfo tiny"></div>
            <video id="vp23" class="video-paused"></video>
            <div class="shortcut">12</div>
        </div>
    </div>
    <div class="row">
        <div class="item">
            <div class="videoInfo tiny"></div>
            <video id="vp30" class="video-paused"></video>
            <div class="shortcut">13</div>
        </div>
        <div class="item">
            <div class="videoInfo tiny"></div>
            <video id="vp31" class="video-paused"></video>
            <div class="shortcut">14</div>
        </div>
        <div class="item">
            <div class="videoInfo tiny"></div>
            <video id="vp32" class="video-paused"></video>
            <div class="shortcut">15</div>
        </div>
        <div class="item">
            <div class="videoInfo tiny"></div>
            <video id="vp33" class="video-paused"></video>
            <div class="shortcut">16</div>
        </div>
    </div>

    <div class="audio_row">
        <div class="audio_noitem">&nbsp;</div>
        <div class="audio_item">
            <audio id="audio" class="audio-paused" style="height:50px;" controls></audio>
        </div>
        <div class="audio_noitem">&nbsp;</div>
    </div>
  </div> 


  <script src="javascripts/hls.min.js" type="text/javascript"></script>
  <script src="javascripts/shaka-player.v2.4.5-compiled.js" type="text/javascript"></script>
  <script src="javascripts/viewer.js" type="text/javascript"></script>
  <script src="javascripts/hover.js" type="text/javascript"></script>
  <script src="https://code.jquery.com/jquery-3.3.1.js"
    integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60="
    crossorigin="anonymous"></script>
  <script type="text/javascript">
    document.addEventListener("DOMContentLoaded", function(event) {
        var info = JSON.parse('<%- conf %>');
        var fileurl = null;
        if(info) fileurl = info['url'];
        if(fileurl!=null){
            $.ajax({
                type : 'GET',
                url : fileurl+'info.json',
                success : function (data) {
                    var conf = {
                        "main": [],
                        "row0": [],
                        "row1": [],
                        "row2": [],
                        "row3": []
                    }
                    
                    var dashurl = fileurl.replace('file','dash');
                    // Preview -- not use
                    var obj = {};
                    obj.title = "Preview";
                    obj.manifest = dashurl+"preview.mp4/manifest.mpd";
                    obj.type = "dash";
                    conf['main'].push(obj);
                    // Merge -- not use
                    obj = {};
                    obj.title = "Merge";
                    obj.manifest = "";
                    obj.type = "dash";
                    conf['main'].push(obj);
                    // Audio
                    var aBitrates = data['output']['audio']['profiles_order_by_bitrate'];
                    obj = {};
                    obj.title = "Audio";
                    if(aBitrates !=null)
                        obj.manifest = dashurl+"a_"+aBitrates[0].name+".mp4/manifest.mpd";
                    else obj.manifest = "";
                    obj.type = "dash";
                    conf['main'].push(obj);
                    // MotionVector
                    obj = {};
                    obj.title = "MotionVector";
                    obj.manifest = fileurl+"motion_vector.json";
                    obj.type = "dash";
                    conf['main'].push(obj);

                    // video
                    var vBitrates = data['output']['video']['profiles_order_by_bitrate'];
                    for(var i=0; i<4; i++) {
                        for(var j=0; j<4; j++) {
                            obj = {};
                            obj.title = "Example " + ((i*4)+j+1);
                            if(vBitrates !=null){
                                var video_manfest = "v_,";
                                vBitrates.forEach(function(element){
                                    video_manfest += element.name+"_"+i+"x"+j+".mp4,"
                                });
                                video_manfest += ".urlset/manifest.mpd";
                                obj.manifest = dashurl+video_manfest;
                            }
                            else obj.manifest = "";
                            obj.type = "dash";    
                            conf['row'+i].push(obj);
                        }
                    }
                    //console.log('conf',conf);
                    init(conf);
                }        
            });
        }
    });

    function init(conf){
        initMultiView(conf);
        initKeyControls();
        initResize();
        initAudio();

        togglePlaybackOnAllViewPorts();

        var threshold = 0.4;    // 400ms 11frames thresold
        var syncerror = 0.003;  // 3ms   0.1 frames 
        // var forceSyncthreshold = 1.000; // 1.0 Seconds diff with Master Clock, force sync with master.
        var forceSyncthreshold = threshold * 2.5; // 0.4 1000ms diff with Master Clock, force sync with master.

        setInterval(function(){ 
            var curTime=[], maxvididx, minvididx;
            var maxTime=0, minTime=888888888, avgTime, accTime = 0;

            var audioelem = document.getElementById('audio');
            if(audioelem.paused) return;
            var curAudioTime = audioelem.currentTime;

            for(var i=0; i<4; i++) {
                for(var j=0; j<4; j++) {
                    var videoelem = document.getElementById('vp'+i+j);
                    //console.log("vp"+i+j+" current Time:"+videoelem.currentTime);
                    curTime[i*4+j] =  videoelem.currentTime;
                    accTime += videoelem.currentTime;
                    if (videoelem.currentTime > maxTime) {
                        maxTime = videoelem.currentTime;
                        maxvididx = 'vp'+i+j;
                    }

                    if (videoelem.currentTime < minTime) {
                        minTime = videoelem.currentTime;
                        minvididx = 'vp'+i+j;
                    }
                    
                }
            }
            avgTime = accTime/16;
            //console.log("avgTime: "+ avgTime);
            //console.log("curAudioTime: "+ curAudioTime);

            var k = 1;
            var pr=1.0;
            var df=0;

            for(var i=0; i<4; i++) {
                for(var j=0; j<4; j++) {
                    var videoelemid = 'vp'+i+j;
                    videoelem = document.getElementById(videoelemid);

                    var df =  curTime[i*4+j] - curAudioTime;

                    if (((df > 0) && (df > forceSyncthreshold))
                    || ((df < 0) && (df < -1 * forceSyncthreshold))
                    )
                    {
                        videoelem.currentTime = audioelem.currentTime;
                        console.log(videoelemid +"ForceSync!, Diff: " + df*1000);
                    }
                    else if (   ((df > 0) && (df > syncerror)) 
                        || ((df < 0) && (df < -1*syncerror)) 
                       )
                    {
                        pr = 1 - df/(2*threshold);
                        if (pr < 0 ) pr = 0.1
                        //console.log(videoelemid +": PR " + pr + "Diff: " + df*1000);
                    }
                    try{
                        videoelem.playbackRate = pr;
                    } catch(e){ console.log("Play Rate Error: ", e); }
                }
            }
        }, threshold*1000);

        // sync function
        setInterval( function(){
            var audioelem = document.getElementById('audio');
            if(audioelem.paused) return;
            else if(trackSelectOption==3) return;
            
            if(trackSelectOption==2 && vectorCretiras[0] == null
                && allTracks['vp00'].length != null ){
                var gap = (motionVectorMax - motionVectorMin) / allTracks['vp00'].length;
                for (var l=0; l<allTracks['vp00'].length - 1; l++){
                    vectorCretiras[l] = motionVectorMax - (gap*(l+1));
                }
            }
            
            for(var i=0; i<4; i++) {
                for(var j=0; j<4; j++) {
                    var videoelemid = 'vp'+i+j;
                    if(activeViewPort != videoelemid) {
                        var value = 0;
                        var isStaticValue = false;
                        if(trackSelectOption==2){
                            var mvectors = motionVectors[videoelemid];
                            if(mvectors!=null && curDisplayIndex < mvectors.length){
                                value = 0;
                                /*
                                for (var l=0; l<vectorCretiras.length; l++){
                                    console.log("vectorCretiras["+l+"]:", vectorCretiras[l]);
                                }
                                console.log("motionVectors["+videoelemid+"]["+curDisplayIndex+"]:", motionVectors[videoelemid][curDisplayIndex]);
                                */
                                for (var l=0; l<vectorCretiras.length; l++){
                                    if(motionVectors[videoelemid][curDisplayIndex] > vectorCretiras[l]){
                                        value = l;
                                        isStaticValue = true;
                                        break;
                                    }
                                    else if (l==(vectorCretiras.length-1)) {
                                        value = (vectorCretiras.length -1);
                                        isStaticValue = true;
                                        break;
                                    }
                                }
                            }
                            else {
                                value = Math.floor(Math.random() * allTracks[videoelemid].length);
                            }
                        }
                        else 
                            value = Math.floor(Math.random() * allTracks[videoelemid].length);
                        //console.log("trackSelectOption:", trackSelectOption, "isStaticValue:",isStaticValue, "value:", value, "curDisplayIndex:", curDisplayIndex);
                        shakaPlayers[videoelemid].selectVariantTrack(allTracks[videoelemid][value], false);
                    } 
                }
            }
            curDisplayIndex += 1;
        }, 1000);
    }

  </script>
</body>
</html>
